<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <!-- Assignment 5.1 -->
    <service verb="store" type="inline" noun="ProductDetails" >
        <description>Create a new product, with the attributes as written in in-parameters
            and written the productId that is generated.
        </description>
        <in-parameters>
            <parameter name="productName" required="true"/>
            <parameter name="description" required="true"/>
            <parameter name="price"/>
            <parameter name="priceUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productId"/>
        </out-parameters>
        <actions>
            <if condition="price!=null">
                <if condition="!priceUomId"><return error="true" message="priceUomId is needed for product price"/></if>
            </if>
            <service-call name="create#mantle.product.Product" in-map="context" out-map="context"/>
            <service-call name="create#mantle.product.ProductPrice" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="get" noun="ProductDetails" type="inline">
        <in-parameters>
            <auto-parameters entity-name="mantle.product.Product" include="pk"/>
            <parameter name="productId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="displayList" type="List">
                <parameter name="productDetailsMap" type="Map">
                    <parameter name="productId"/>
                    <parameter name="productName"/>
                    <parameter name="description"/>
                    <parameter name="price"/>
                    <parameter name="priceUomId"/>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
               <entity-find entity-name="mantle.product.Product" list="productDetailsList">
                  <econdition field-name="productId" value="${productId}"/>
              </entity-find>
            <if condition="!productDetailsList">
                <return error="true" message="Product does not exist"/>
            </if>
            <!--  <entity-find entity-name="mantle.product.ProductPrice" list="productDetailsList">
                  <econdition field-name="productId" value="${productId}"/>
              </entity-find>
              Both the ways are fine
              -->
            <entity-find-related value-field="productDetailsList.first" relationship-name="mantle.product.ProductPrice" list="productDetailsListToDisplay"/>
            <set field="displayList" from="productDetailsList+productDetailsListToDisplay"/>
        </actions>
    </service>


</services>

        <!-- The following service is according to the Assignment 5.1
            <service verb="store" type="inline" noun="ProductDetails" >
                <description>Create a new product, with the attributes as written in in-parameters
                and written the productId that is generated.
                </description>
                <in-parameters>
                    <parameter name="productName" required="true"/>
                    <parameter name="description" required="true"/>
                    <parameter name="price"/>
                    <parameter name="priceUomId" default-value="USD"/>
                </in-parameters>
                <out-parameters>
                    <parameter name="productId"/>
                </out-parameters>
                <actions>
                    <if condition="priceUomId.length()==0"><set field="priceUomId" value="USD"/></if>
                    <service-call name="moqui.training.entity.usl.ProductDataService.create#Product" in-map="context" out-map="context"/>
                    <log message="=====================${productId}"/>
                    // <script>context.put("productId",context.get())</script>
                    <service-call name="moqui.training.entity.usl.ProductDataService.create#ProductPrice" in-map="context" out-map="context"/>
                </actions>
            </service>
            -->
